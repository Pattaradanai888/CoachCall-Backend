"""adding whole project database table with normalization

Revision ID: 62fcfd48130f
Revises: 76f1cfa204f7
Create Date: 2025-06-12 15:34:55.632343

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '62fcfd48130f'
down_revision: Union[str, None] = '76f1cfa204f7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

dominanthandenum = postgresql.ENUM('right', 'left', 'ambidextrous', name='dominanthandenum')

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    dominanthandenum.create(op.get_bind(), checkfirst=True)

    op.drop_table('skill_scores')
    op.drop_table('skill_assessments')

    op.create_table('courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('cover_image_url', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('experience_levels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('positions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('skills',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_profiles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=False),
    sa.Column('profile_image_url', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('scheduled_date', sa.DateTime(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_skill_weights',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Numeric(precision=3, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('task_id', 'skill_id')
    )
    op.create_table('athlete_group_association',
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('athlete_id', 'group_id')
    )
    op.create_table('athlete_position_association',
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.Column('position_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['position_id'], ['positions.id'], ),
    sa.PrimaryKeyConstraint('athlete_id', 'position_id')
    )
    op.create_table('athlete_skills',
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.Column('skill_id', sa.Integer(), nullable=False),
    sa.Column('current_score', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['skill_id'], ['skills.id'], ),
    sa.PrimaryKeyConstraint('athlete_id', 'skill_id')
    )
    op.create_table('course_attendees',
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.PrimaryKeyConstraint('course_id', 'athlete_id')
    )
    op.create_table('session_attendees',
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.Column('was_present', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('session_id', 'athlete_id')
    )
    op.create_table('session_tasks',
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('sequence', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('session_id', 'task_id')
    )
    op.create_table('task_completions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('athlete_id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Numeric(precision=4, scale=2), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )


    op.add_column('athletes', sa.Column('experience_level_id', sa.Integer(), nullable=True))

    op.execute(
        "UPDATE athletes SET dominant_hand = NULL "
        "WHERE dominant_hand NOT IN ('Right', 'Left', 'Ambidextrous')"
    )

    op.alter_column('athletes', 'dominant_hand',
               existing_type=sa.VARCHAR(length=20),
               type_= dominanthandenum,
               existing_nullable=True,
               postgresql_using="dominant_hand::dominanthandenum")

    op.drop_constraint('athletes_group_id_fkey', 'athletes', type_='foreignkey')
    op.create_foreign_key(None, 'athletes', 'experience_levels', ['experience_level_id'], ['id'])
    op.drop_column('athletes', 'group_id')
    op.drop_column('athletes', 'experience_level')
    op.drop_column('athletes', 'last_assessment_date')
    op.drop_column('athletes', 'total_power_rate')
    op.drop_column('athletes', 'development_rate')
    op.drop_column('athletes', 'position')
    op.drop_column('groups', 'created_at')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_fullname', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'profile_image_url')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'fullname')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('fullname', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('profile_image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_fullname', 'users', ['fullname'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.add_column('groups', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('position', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('development_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('total_power_rate', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('last_assessment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('experience_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('athletes', sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'athletes', type_='foreignkey')
    op.create_foreign_key('athletes_group_id_fkey', 'athletes', 'groups', ['group_id'], ['id'])
    op.alter_column('athletes', 'dominant_hand',
               existing_type=sa.Enum('right', 'left', 'ambidextrous', name='dominanthandenum'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.drop_column('athletes', 'experience_level_id')
    op.create_table('skill_scores',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False),
    sa.Column('assessment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assessment_id'], ['skill_assessments.id'], name='skill_scores_assessment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skill_scores_pkey')
    )
    op.create_table('skill_assessments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('total_score', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('athlete_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['athlete_id'], ['athletes.id'], name='skill_assessments_athlete_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='skill_assessments_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='skill_assessments_pkey')
    )
    op.drop_table('task_completions')
    op.drop_table('session_tasks')
    op.drop_table('session_attendees')
    op.drop_table('course_attendees')
    op.drop_table('athlete_skills')
    op.drop_table('athlete_position_association')
    op.drop_table('athlete_group_association')
    op.drop_table('task_skill_weights')
    op.drop_table('sessions')
    op.drop_table('user_profiles')
    op.drop_table('tasks')
    op.drop_table('skills')
    op.drop_table('positions')
    op.drop_table('experience_levels')
    op.drop_table('courses')
    # ### end Alembic commands ###
